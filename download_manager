from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime
from core.trade_data import TradeDataDownloader
from core.exception_data import ExceptionDataDownloader

class DataDownloader:
    def __init__(self, product_type, legal_entities, source_systems, start_date, end_date):
        self.product_type = product_type
        self.legal_entities = legal_entities
        self.source_systems = source_systems
        self.start_date = start_date
        self.end_date = end_date
        self.success_count = 0

    def run_parallel_download(self):
        futures = []
        with ThreadPoolExecutor() as executor:
            for le in self.legal_entities:
                for ss in self.source_systems:
                    futures.append(executor.submit(self.download_trade_data, le, ss, "UAT"))
                    futures.append(executor.submit(self.download_trade_data, le, ss, "PROD"))

                futures.append(executor.submit(self.download_exception_data, le))

            for f in as_completed(futures):
                result = f.result()
                if result:
                    self.success_count += 1

        st.info(f"ðŸ“Š Total successful downloads: {self.success_count}")

    def download_trade_data(self, legal_entity, source_system, env):
        downloader = TradeDataDownloader(
            product_type=self.product_type,
            legal_entity=legal_entity,
            source_system=source_system,
            start_date=self.start_date,
            end_date=self.end_date,
            env=env
        )
        downloader.download()
        return downloader.downloaded

    def download_exception_data(self, legal_entity):
        # Add real logic here later; return True for now
        st.info(f"ðŸ“¦ Placeholder: downloading exception data for {legal_entity}")
        return True
