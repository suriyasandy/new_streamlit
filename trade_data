import requests
import streamlit as st
from config.trade_config import TRADE_ENVIRONMENTS
from datetime import timedelta

class TradeDataDownloader:
    def __init__(self, product_type, legal_entity, source_system, start_date, end_date, env):
        self.product_type = product_type
        self.legal_entity = legal_entity
        self.source_system = source_system
        self.start_date = start_date
        self.end_date = end_date
        self.env = env
        self.env_config = TRADE_ENVIRONMENTS[env]
        self.token = None
        self.download_count = 0

    def authenticate(self):
        payload = {
            "username": self.env_config["username"],
            "password": self.env_config["password"]
        }
        headers = {
            "Origin": self.env_config["origin"],
            "Referer": self.env_config["referer"]
        }
        try:
            res = requests.post(self.env_config["auth_url"], json=payload, headers=headers)
            res.raise_for_status()
            self.token = res.json().get("access_token")
            return True
        except Exception as e:
            st.error(f"‚ùå {self.env} Auth failed for {self.legal_entity}-{self.source_system}: {e}")
            return False

    def download(self):
        st.info(f"üîÑ Starting download for {self.env}: {self.legal_entity} | {self.source_system}")

        if not self.authenticate():
            return 0  # No files downloaded

        headers = {
            "Authorization": f"Bearer {self.token}",
            "Origin": self.env_config["origin"],
            "Referer": self.env_config["referer"]
        }

        current_date = self.start_date
        while current_date <= self.end_date:
            params = {
                "productType": self.product_type,
                "legalEntity": self.legal_entity,
                "sourceSystem": self.source_system,
                "startDate": current_date.strftime("%Y-%m-%d"),
                "endDate": current_date.strftime("%Y-%m-%d")
            }
            try:
                response = requests.get(self.env_config["data_url"], headers=headers, params=params)
                response.raise_for_status()
                
                if response.status_code == 200 and response.content:
                    self.download_count += 1
                    st.success(f"‚úÖ Downloaded for {current_date} ({self.env}, {self.legal_entity}, {self.source_system})")
                else:
                    st.warning(f"‚ö†Ô∏è No data for {current_date} ({self.env}, {self.legal_entity})")

            except Exception as e:
                st.error(f"‚ùå Failed for {current_date} - {e}")
            
            current_date += timedelta(days=1)

        return self.download_count
